{"version":3,"sources":["utils.js"],"names":[],"mappings":";AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,SAAS,QAAQ,WAAR,CAAb;AACA,IAAI,oBAAoB,QAAQ,6BAAR,CAAxB;;AAEA,QAAQ,UAAR,GAAqB,UAAU,KAAV,EAAiB;AACpC,MAAI,qBAAqB,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GACrB,OAAO,KAAP,CAAa,kBADQ,GAErB,OAAO,GAAP,CAAW,kBAFf;AAGA,SAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,kBAAhB,EAAoC,KAApC,CAAP;AACD,CALD;;AAOA,QAAQ,UAAR,GAAqB,UAAU,OAAV,EAAmB;AACtC,YAAU,WAAW,EAArB;;AAEA,MAAI,YAAY;AACd,YAAQ,YADM;AAEd,aAAS;AACP,gBAAU,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAD5B;AAEP,iBAAW,QAAQ;AAFZ;AAFK,GAAhB;;AAQA;AACA,WAAS,eAAT,CAA0B,MAA1B,EAAkC,aAAlC,EAAiD;AAC/C,QAAI,UAAU,CAAC,SAAD,CAAd;AACA,QAAI,MAAJ,EAAY;AACV,cAAQ,IAAR,CAAa;AACX,gBAAQ,SAAS,SADN;AAEX,iBAAS,eAAc,EAAd,EAAkB,aAAlB,EAAiC;AACxC,qBAAW,QAAQ;AADqB,SAAjC;AAFE,OAAb;AAMD;;AAED;AACA;AACA,QAAI,QAAQ,OAAZ,EAAqB;AACnB,aAAO,kBAAkB,OAAlB,CAA0B;AAC/B,aAAK,OAD0B;AAE/B,kBAAU;AAFqB,OAA1B,CAAP;AAID,KALD,MAKO;AACL,aAAO,CAAC,kBAAD,EAAqB,MAArB,CAA4B,OAA5B,CAAP;AACD;AACF;;AAED;AACA,SAAO;AACL,SAAK,iBADA;AAEL,aAAS,iBAFJ;AAGL,UAAM,gBAAgB,MAAhB,CAHD;AAIL,UAAM,gBAAgB,MAAhB,EAAwB,EAAE,gBAAgB,IAAlB,EAAxB,CAJD;AAKL,UAAM,gBAAgB,MAAhB,CALD;AAML,YAAQ,gBAAgB,QAAhB,CANH;AAOL,UAAM,gBAAgB,QAAhB;AAPD,GAAP;AASD,CA7CD;;AA+CA;AACA,QAAQ,YAAR,GAAuB,UAAU,OAAV,EAAmB;AACxC,MAAI,SAAS,EAAb;AACA,MAAI,UAAU,QAAQ,UAAR,CAAmB,OAAnB,CAAd;AACA,OAAK,IAAI,SAAT,IAAsB,OAAtB,EAA+B;AAC7B,QAAI,SAAS,QAAQ,SAAR,CAAb;AACA,WAAO,IAAP,CAAY;AACV,YAAM,IAAI,MAAJ,CAAW,QAAQ,SAAR,GAAoB,GAA/B,CADI;AAEV,WAAK;AAFK,KAAZ;AAID;AACD,SAAO,MAAP;AACD,CAXD","file":"utils-compiled.js","sourcesContent":["var path = require('path')\r\nvar config = require('../config')\r\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\r\n\r\nexports.assetsPath = function (_path) {\r\n  var assetsSubDirectory = process.env.NODE_ENV === 'production'\r\n    ? config.build.assetsSubDirectory\r\n    : config.dev.assetsSubDirectory\r\n  return path.posix.join(assetsSubDirectory, _path)\r\n}\r\n\r\nexports.cssLoaders = function (options) {\r\n  options = options || {}\r\n\r\n  var cssLoader = {\r\n    loader: 'css-loader',\r\n    options: {\r\n      minimize: process.env.NODE_ENV === 'production',\r\n      sourceMap: options.sourceMap\r\n    }\r\n  }\r\n\r\n  // generate loader string to be used with extract text plugin\r\n  function generateLoaders (loader, loaderOptions) {\r\n    var loaders = [cssLoader]\r\n    if (loader) {\r\n      loaders.push({\r\n        loader: loader + '-loader',\r\n        options: Object.assign({}, loaderOptions, {\r\n          sourceMap: options.sourceMap\r\n        })\r\n      })\r\n    }\r\n\r\n    // Extract CSS when that option is specified\r\n    // (which is the case during production build)\r\n    if (options.extract) {\r\n      return ExtractTextPlugin.extract({\r\n        use: loaders,\r\n        fallback: 'vue-style-loader'\r\n      })\r\n    } else {\r\n      return ['vue-style-loader'].concat(loaders)\r\n    }\r\n  }\r\n\r\n  // https://vue-loader.vuejs.org/en/configurations/extract-css.html\r\n  return {\r\n    css: generateLoaders(),\r\n    postcss: generateLoaders(),\r\n    less: generateLoaders('less'),\r\n    sass: generateLoaders('sass', { indentedSyntax: true }),\r\n    scss: generateLoaders('sass'),\r\n    stylus: generateLoaders('stylus'),\r\n    styl: generateLoaders('stylus')\r\n  }\r\n}\r\n\r\n// Generate loaders for standalone style files (outside of .vue)\r\nexports.styleLoaders = function (options) {\r\n  var output = []\r\n  var loaders = exports.cssLoaders(options)\r\n  for (var extension in loaders) {\r\n    var loader = loaders[extension]\r\n    output.push({\r\n      test: new RegExp('\\\\.' + extension + '$'),\r\n      use: loader\r\n    })\r\n  }\r\n  return output\r\n}\r\n"]}